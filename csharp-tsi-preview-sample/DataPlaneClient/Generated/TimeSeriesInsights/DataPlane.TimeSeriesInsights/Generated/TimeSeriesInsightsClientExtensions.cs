// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.TimeSeriesInsights
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TimeSeriesInsightsClient.
    /// </summary>
    public static partial class TimeSeriesInsightsClientExtensions
    {
            /// <summary>
            /// Returns the time range and distribution of event count over the event
            /// timestamp ($ts). This API can be used to provide landing experience of
            /// navigating to the environment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientRequestId'>
            /// Optional client request ID. Service records this value. Allows the service
            /// to trace operation across services, and allows the customer to contact
            /// support support regarding a particular request.
            /// </param>
            /// <param name='clientSessionId'>
            /// Optional client session ID. Service records this value. Allows the service
            /// to trace a group of related operations across services, and allows the
            /// customer to contact support support regarding a particular group of
            /// requests.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AvailabilityResponse> GetAvailabilityAsync(this ITimeSeriesInsightsClient operations, string clientRequestId = default(string), string clientSessionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAvailabilityWithHttpMessagesAsync(clientRequestId, clientSessionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns environment event schema for a given search span. Event schema is a
            /// set of property definitions. Event schema may not be contain all persisted
            /// properties when there are too many properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters to get event schema.
            /// </param>
            /// <param name='clientRequestId'>
            /// Optional client request ID. Service records this value. Allows the service
            /// to trace operation across services, and allows the customer to contact
            /// support support regarding a particular request.
            /// </param>
            /// <param name='clientSessionId'>
            /// Optional client session ID. Service records this value. Allows the service
            /// to trace a group of related operations across services, and allows the
            /// customer to contact support support regarding a particular group of
            /// requests.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventSchema> GetEventSchemaAsync(this ITimeSeriesInsightsClient operations, GetEventSchemaRequest parameters, string clientRequestId = default(string), string clientSessionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEventSchemaWithHttpMessagesAsync(parameters, clientRequestId, clientSessionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the model settings which includes model display name, Time Series
            /// ID properties and default type ID. Every pay-as-you-go environment has a
            /// model that is automatically created.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='clientRequestId'>
            /// Optional client request ID. Service records this value. Allows the service
            /// to trace operation across services, and allows the customer to contact
            /// support support regarding a particular request.
            /// </param>
            /// <param name='clientSessionId'>
            /// Optional client session ID. Service records this value. Allows the service
            /// to trace a group of related operations across services, and allows the
            /// customer to contact support support regarding a particular group of
            /// requests.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ModelSettingsResponse> GetModelSettingsAsync(this ITimeSeriesInsightsClient operations, string clientRequestId = default(string), string clientSessionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetModelSettingsWithHttpMessagesAsync(clientRequestId, clientSessionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates time series model settings - either the model name or default type
            /// ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Model settings update request body.
            /// </param>
            /// <param name='clientRequestId'>
            /// Optional client request ID. Service records this value. Allows the service
            /// to trace operation across services, and allows the customer to contact
            /// support support regarding a particular request.
            /// </param>
            /// <param name='clientSessionId'>
            /// Optional client session ID. Service records this value. Allows the service
            /// to trace a group of related operations across services, and allows the
            /// customer to contact support support regarding a particular group of
            /// requests.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ModelSettingsResponse> UpdateModelSettingsAsync(this ITimeSeriesInsightsClient operations, UpdateModelSettingsRequest parameters, string clientRequestId = default(string), string clientSessionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateModelSettingsWithHttpMessagesAsync(parameters, clientRequestId, clientSessionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Executes Time Series Query in pages of results - Get Events, Get Series or
            /// Aggregate Series.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Time series query request body.
            /// </param>
            /// <param name='continuationToken'>
            /// Continuation token from previous page of results to retrieve the next page
            /// of the results in calls that support pagination. To get the first page
            /// results, specify null continuation token as parameter value. Returned
            /// continuation token is null if all results have been returned, and there is
            /// no next page of results.
            /// </param>
            /// <param name='clientRequestId'>
            /// Optional client request ID. Service records this value. Allows the service
            /// to trace operation across services, and allows the customer to contact
            /// support support regarding a particular request.
            /// </param>
            /// <param name='clientSessionId'>
            /// Optional client session ID. Service records this value. Allows the service
            /// to trace a group of related operations across services, and allows the
            /// customer to contact support support regarding a particular group of
            /// requests.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueryResultPage> ExecuteQueryPagedAsync(this ITimeSeriesInsightsClient operations, QueryRequest parameters, string continuationToken = default(string), string clientRequestId = default(string), string clientSessionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteQueryPagedWithHttpMessagesAsync(parameters, continuationToken, clientRequestId, clientSessionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets time series instances in pages.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continuationToken'>
            /// Continuation token from previous page of results to retrieve the next page
            /// of the results in calls that support pagination. To get the first page
            /// results, specify null continuation token as parameter value. Returned
            /// continuation token is null if all results have been returned, and there is
            /// no next page of results.
            /// </param>
            /// <param name='clientRequestId'>
            /// Optional client request ID. Service records this value. Allows the service
            /// to trace operation across services, and allows the customer to contact
            /// support support regarding a particular request.
            /// </param>
            /// <param name='clientSessionId'>
            /// Optional client session ID. Service records this value. Allows the service
            /// to trace a group of related operations across services, and allows the
            /// customer to contact support support regarding a particular group of
            /// requests.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetInstancesPage> GetInstancesPagedAsync(this ITimeSeriesInsightsClient operations, string continuationToken = default(string), string clientRequestId = default(string), string clientSessionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInstancesPagedWithHttpMessagesAsync(continuationToken, clientRequestId, clientSessionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Executes a batch get, create, update, delete operation on multiple time
            /// series instances.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Time series instances suggest request body.
            /// </param>
            /// <param name='clientRequestId'>
            /// Optional client request ID. Service records this value. Allows the service
            /// to trace operation across services, and allows the customer to contact
            /// support support regarding a particular request.
            /// </param>
            /// <param name='clientSessionId'>
            /// Optional client session ID. Service records this value. Allows the service
            /// to trace a group of related operations across services, and allows the
            /// customer to contact support support regarding a particular group of
            /// requests.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InstancesBatchResponse> ExecuteInstancesBatchOperationAsync(this ITimeSeriesInsightsClient operations, InstancesBatchRequest parameters, string clientRequestId = default(string), string clientSessionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteInstancesBatchOperationWithHttpMessagesAsync(parameters, clientRequestId, clientSessionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Suggests keywords based on time series instance attributes to be later used
            /// in Search Instances.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Time series instances suggest request body.
            /// </param>
            /// <param name='clientRequestId'>
            /// Optional client request ID. Service records this value. Allows the service
            /// to trace operation across services, and allows the customer to contact
            /// support support regarding a particular request.
            /// </param>
            /// <param name='clientSessionId'>
            /// Optional client session ID. Service records this value. Allows the service
            /// to trace a group of related operations across services, and allows the
            /// customer to contact support support regarding a particular group of
            /// requests.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InstancesSuggestResponse> SuggestInstancesAsync(this ITimeSeriesInsightsClient operations, InstancesSuggestRequest parameters, string clientRequestId = default(string), string clientSessionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SuggestInstancesWithHttpMessagesAsync(parameters, clientRequestId, clientSessionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Partial list of hits on search for time series instances based on instance
            /// attributes.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Time series instances search request body.
            /// </param>
            /// <param name='continuationToken'>
            /// Continuation token from previous page of results to retrieve the next page
            /// of the results in calls that support pagination. To get the first page
            /// results, specify null continuation token as parameter value. Returned
            /// continuation token is null if all results have been returned, and there is
            /// no next page of results.
            /// </param>
            /// <param name='clientRequestId'>
            /// Optional client request ID. Service records this value. Allows the service
            /// to trace operation across services, and allows the customer to contact
            /// support support regarding a particular request.
            /// </param>
            /// <param name='clientSessionId'>
            /// Optional client session ID. Service records this value. Allows the service
            /// to trace a group of related operations across services, and allows the
            /// customer to contact support support regarding a particular group of
            /// requests.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InstancesSearchResponsePage> SearchInstancesPagedAsync(this ITimeSeriesInsightsClient operations, InstancesSearchRequest parameters, string continuationToken = default(string), string clientRequestId = default(string), string clientSessionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchInstancesPagedWithHttpMessagesAsync(parameters, continuationToken, clientRequestId, clientSessionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets time series types in pages.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continuationToken'>
            /// Continuation token from previous page of results to retrieve the next page
            /// of the results in calls that support pagination. To get the first page
            /// results, specify null continuation token as parameter value. Returned
            /// continuation token is null if all results have been returned, and there is
            /// no next page of results.
            /// </param>
            /// <param name='clientRequestId'>
            /// Optional client request ID. Service records this value. Allows the service
            /// to trace operation across services, and allows the customer to contact
            /// support support regarding a particular request.
            /// </param>
            /// <param name='clientSessionId'>
            /// Optional client session ID. Service records this value. Allows the service
            /// to trace a group of related operations across services, and allows the
            /// customer to contact support support regarding a particular group of
            /// requests.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetTypesPage> GetTypesPagedAsync(this ITimeSeriesInsightsClient operations, string continuationToken = default(string), string clientRequestId = default(string), string clientSessionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTypesPagedWithHttpMessagesAsync(continuationToken, clientRequestId, clientSessionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Executes a batch get, create, update, delete operation on multiple time
            /// series types.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Time series types batch request body.
            /// </param>
            /// <param name='clientRequestId'>
            /// Optional client request ID. Service records this value. Allows the service
            /// to trace operation across services, and allows the customer to contact
            /// support support regarding a particular request.
            /// </param>
            /// <param name='clientSessionId'>
            /// Optional client session ID. Service records this value. Allows the service
            /// to trace a group of related operations across services, and allows the
            /// customer to contact support support regarding a particular group of
            /// requests.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TypesBatchResponse> ExecuteTypesBatchOperationAsync(this ITimeSeriesInsightsClient operations, TypesBatchRequest parameters, string clientRequestId = default(string), string clientSessionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteTypesBatchOperationWithHttpMessagesAsync(parameters, clientRequestId, clientSessionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns time series hierarchies definitions in pages.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continuationToken'>
            /// Continuation token from previous page of results to retrieve the next page
            /// of the results in calls that support pagination. To get the first page
            /// results, specify null continuation token as parameter value. Returned
            /// continuation token is null if all results have been returned, and there is
            /// no next page of results.
            /// </param>
            /// <param name='clientRequestId'>
            /// Optional client request ID. Service records this value. Allows the service
            /// to trace operation across services, and allows the customer to contact
            /// support support regarding a particular request.
            /// </param>
            /// <param name='clientSessionId'>
            /// Optional client session ID. Service records this value. Allows the service
            /// to trace a group of related operations across services, and allows the
            /// customer to contact support support regarding a particular group of
            /// requests.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetHierarchiesPage> GetHierarchiesPagedAsync(this ITimeSeriesInsightsClient operations, string continuationToken = default(string), string clientRequestId = default(string), string clientSessionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHierarchiesPagedWithHttpMessagesAsync(continuationToken, clientRequestId, clientSessionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Executes a batch get, create, update, delete operation on multiple time
            /// series hierarchy definitions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Time series hierarchies batch request body.
            /// </param>
            /// <param name='clientRequestId'>
            /// Optional client request ID. Service records this value. Allows the service
            /// to trace operation across services, and allows the customer to contact
            /// support support regarding a particular request.
            /// </param>
            /// <param name='clientSessionId'>
            /// Optional client session ID. Service records this value. Allows the service
            /// to trace a group of related operations across services, and allows the
            /// customer to contact support support regarding a particular group of
            /// requests.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HierarchiesBatchResponse> ExecuteHierarchiesBatchOperationAsync(this ITimeSeriesInsightsClient operations, HierarchiesBatchRequest parameters, string clientRequestId = default(string), string clientSessionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteHierarchiesBatchOperationWithHttpMessagesAsync(parameters, clientRequestId, clientSessionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
